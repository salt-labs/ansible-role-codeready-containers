---

#########################
# Tasks (Remote DNSMasq)
#########################

- name: "DNSMasq: Packages"
  block:

    - name: "Check if Firewalld installed"
      package:
        name: firewalld
        state: present
      check_mode: True
      ignore_errors: True
      register: firewalld_installed

    - name: "{{ type }} Firewalld package"
      package:
        name:
          - firewalld
        state: "{{ state }}"
      when:
        - type == 'Install'

    - name: "{{ type }} DNSMasq package"
      package:
        name:
          - dnsmasq
        state: "{{ state }}"

  when:
    - type is defined
    - state is defined

- name: "HAProxy: Firewall Ports"
  block:

    - name: "Start Firewalld"
      service:
        name: firewalld
        state: started
        enabled: True
      when:
        - type == 'Install'

    - name: "Open Firewall Ports"
      set_fact:
        verb: "Open"
      when:
        - type == "Install"
        - state is defined

    - name: "Close Firewall Ports"
      set_fact:
        verb: "Close"
      when:
        - type == "Remove"
        - state is defined

    - name: "{{ type }} TCP Port 53 (DNS)"
      ansible.posix.firewalld:
        port: 53/tcp
        permanent: True
        state: "{{ 'enabled' if state == 'present' else 'disabled' }}"
      notify:
        - "Reload Firewalld"

    - name: "{{ type }} UDP Port 53 (DNS)"
      ansible.posix.firewalld:
        port: 53/udp
        permanent: True
        state: "{{ 'enabled' if state == 'present' else 'disabled' }}"
      notify:
        - "Reload Firewalld"

    - name: "{{ type }} TCP Port 53 (DNS)"
      ansible.posix.firewalld:
        port: 53/tcp
        permanent: True
        state: "{{ 'enabled' if state == 'present' else 'disabled' }}"
      notify:
        - "Reload Firewalld"

    - name: "{{ type }} UDP Port 53 (DNS)"
      ansible.posix.firewalld:
        port: 53/udp
        permanent: True
        state: "{{ 'enabled' if state == 'present' else 'disabled' }}"
        notify:
          - "Reload Firewalld"

  when:
    - type is defined
    - state is defined

- name: "DNSMasq: Gather information"
  block:

    - name: Determine CRC IP address
      command:
        argv:
          - "crc"
          - "ip"
      become: False
      become_user: "{{ crc_server_user_crc }}"
      register: crc_server_ip_address
      check_mode: False

    - name: Set CRC IP address facts
      set_fact:
        crc_server_ip: "{{ crc_server_ip_address.stdout | default('NONE') }}"
        crc_remote_dnsmasq_ip: "{{ ansible_facts.default_ipv4.address | default('NONE') }}"

    - name: Display CRC IP address facts
      ansible.builtin.debug:
        msg:
          - "CRC IPv4: {{ crc_server_ip }}"
          - "DNSMasq IPv4: {{ crc_remote_dnsmasq_ip }}"

  when:
    - state is defined
    - type == 'Install'

- name: "DNSMasq: Configure DNSMasq folders"
  block:

    - name: "{{ type }} NetworkManager conf.d (CRC Server)"
      file:
        state: "directory"
        path: /etc/NetworkManager/conf.d
        recurse: True
        owner: root
        group: root

    - name: "{{ type }} NetworkManager conf.d (CRC Client)"
      file:
        state: directory
        path: /etc/NetworkManager/conf.d
        recurse: True
        owner: root
        group: root
      delegate_to: "{{ crc_controller_host }}"

    - name: "{{ type }} NetworkManager dnsmasq.d (CRC Server)"
      file:
        state: "{{ directory if state == 'present' else 'absent' }}"
        path: /etc/NetworkManager/dnsmasq.d
        recurse: True
        owner: root
        group: root

    - name: "{{ type }} NetworkManager dnsmasq.d (CRC Client)"
      file:
        state: "{{ directory ifstate == 'present' else 'absent' }}"
        path: /etc/NetworkManager/dnsmasq.d
        recurse: True
        owner: root
        group: root
      delegate_to: "{{ crc_controller_host }}"

  when:
    - state is defined

- name: "DNSMasq: Configure DNSMasq configs"
  block:

    - name: Configure NetworkManager (CRC Server)
      template:
        src: networkmanager_crc_server.conf.j2
        dest: /etc/NetworkManager/conf.d/crc-dnsmasq.conf
        owner: root
        group: root
        mode: 0666
      notify:
        - "Reload NetworkManager"

    - name: Configure DNSMasq (CRC Server)
      template:
        src: dnsmasq_crc_server.conf.j2
        dest: /etc/NetworkManager/dnsmasq.d/crc-dnsmasq.conf
        owner: root
        group: root
        mode: 0666
      notify:
        - "Restart DNSMasq"

    - name: Configure NetworkManager (CRC Client)
      template:
        src: networkmanager_crc_client.conf.j2
        dest: /etc/NetworkManager/conf.d/crc-dnsmasq.conf
        owner: root
        group: root
        mode: 0666
      delegate_to: "{{ crc_controller_host }}"
      notify:
        - "Reload NetworkManager"

    - name: Configure DNSMasq (CRC Client)
      template:
        src: dnsmasq_crc_client.conf.j2
        dest: /etc/NetworkManager/dnsmasq.d/crc-dnsmasq.conf
        owner: root
        group: root
        mode: 0666
      delegate_to: "{{ crc_controller_host }}"
      notify:
        - "Restart DNSMasq"

    - name: Start DNSMasq
      service:
        name: dnsmasq
        state: started
        enabled: True
      when:
        - not ansible_check_mode

    - name: Reload Firewalld
      service:
        name: firewalld
        state: reloaded

  when:
    - state is defined
    - type == "Install"
